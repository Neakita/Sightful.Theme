<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:icons="clr-namespace:Material.Icons.Avalonia;assembly=Material.Icons.Avalonia"
                    xmlns:commands="clr-namespace:Sightful.Avalonia.Commands">
    <Design.PreviewWith>
        <!-- ReSharper disable Xaml.StyleClassNotFound -->
        <Border Classes="outer wide-padding">
            <StackPanel Classes="regular-spacing">
                <!-- ReSharper restore Xaml.StyleClassNotFound -->
                <TextBox Watermark="Enter variables" Classes="clear-button" Text="123"/>
                <TextBox InnerLeftContent="{icons:MaterialIconExt Email}"
                         Watermark="Email"/>
                <TextBox InnerLeftContent="{icons:MaterialIconExt Password}"
                         Watermark="Password"
                         Classes="reveal-password-button"
                         Text="qwerty123"
                         PasswordChar="*"/>
                <TextBox InnerLeftContent="{icons:MaterialIconExt Square}"
                         InnerRightContent="{icons:MaterialIconExt Square}"
                         Text="|Squares|"/>
                <TextBox Text="Overflow" Width="80"/>
                <TextBox Text="{Binding $self.Bounds.Height}" InnerRightContent="px"/>
                <TextBox Watermark="Compact" Classes="compact"/>
            </StackPanel>
        </Border>
    </Design.PreviewWith>

    <ControlTheme x:Key="{x:Type TextBox}" TargetType="TextBox">
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryForeground}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="Background" Value="{DynamicResource ControlBackground}"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}"/>
        <Setter Property="ClipToBounds" Value="False"/>
        <Setter Property="Cursor" Value="Ibeam"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource TextSelection}"/>
        <Setter Property="Transitions">
            <Transitions>
                <BrushTransition Property="Foreground" Duration="{DynamicResource BrushTransitionDuration}"/>
            </Transitions>
        </Setter>
        <Setter Property="FocusAdorner" Value="{x:Null}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource SecondaryForeground}"/>
        <Setter Property="ScrollViewer.IsScrollChainingEnabled" Value="True"/>
        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Border Name="Outer">
                        <Border.Transitions>
                            <Transitions>
                                <BrushTransition Property="BorderBrush"
                                                 Duration="{DynamicResource BrushTransitionDuration}"/>
                            </Transitions>
                        </Border.Transitions>
                        <Border Name="Inner"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}">
                            <Grid ColumnDefinitions="Auto * Auto">
                                <ContentPresenter Name="LeftContentPresenter"
                                                  Grid.Column="0"
                                                  Content="{TemplateBinding InnerLeftContent}"
                                                  IsVisible="{TemplateBinding InnerLeftContent, Converter={x:Static ObjectConverters.IsNotNull}}">
                                    <ContentPresenter.Transitions>
                                        <Transitions>
                                            <BrushTransition Property="Foreground"
                                                             Duration="{DynamicResource BrushTransitionDuration}"/>
                                        </Transitions>
                                    </ContentPresenter.Transitions>
                                </ContentPresenter>
                                <TextBlock Name="Watermark"
                                           Grid.Column="1"
                                           Text="{TemplateBinding Watermark}"
                                           IsVisible="{TemplateBinding Text, Converter={x:Static StringConverters.IsNullOrEmpty}}">
                                    <TextBlock.Transitions>
                                        <Transitions>
                                            <BrushTransition Property="Foreground"
                                                             Duration="{DynamicResource BrushTransitionDuration}"/>
                                        </Transitions>
                                    </TextBlock.Transitions>
                                </TextBlock>
                                <ScrollViewer Grid.Column="1"
                                              Name="PART_ScrollViewer"
                                              HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                                              VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}"
                                              IsScrollChainingEnabled="{TemplateBinding (ScrollViewer.IsScrollChainingEnabled)}"
                                              AllowAutoHide="{TemplateBinding (ScrollViewer.AllowAutoHide)}"
                                              BringIntoViewOnFocusChange="{TemplateBinding (ScrollViewer.BringIntoViewOnFocusChange)}">
                                    <TextPresenter Name="PART_TextPresenter"
                                                   Text="{TemplateBinding Text, Mode=TwoWay}"
                                                   CaretIndex="{TemplateBinding CaretIndex}"
                                                   SelectionStart="{TemplateBinding SelectionStart}"
                                                   SelectionEnd="{TemplateBinding SelectionEnd}"
                                                   TextAlignment="{TemplateBinding TextAlignment}"
                                                   TextWrapping="{TemplateBinding TextWrapping}"
                                                   LineHeight="{TemplateBinding LineHeight}"
                                                   LetterSpacing="{TemplateBinding LetterSpacing}"
                                                   PasswordChar="{TemplateBinding PasswordChar}"
                                                   RevealPassword="{TemplateBinding RevealPassword}"
                                                   SelectionBrush="{TemplateBinding SelectionBrush}"
                                                   SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
                                                   CaretBrush="{TemplateBinding CaretBrush}"
                                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   ClipToBounds="True"
                                                   Background="Transparent"/>
                                </ScrollViewer>
                                <ContentPresenter Name="RightContentPresenter" Grid.Column="2"
                                                  Content="{TemplateBinding InnerRightContent}"
                                                  IsVisible="{TemplateBinding InnerRightContent, Converter={x:Static ObjectConverters.IsNotNull}}">
                                    <ContentPresenter.Transitions>
                                        <Transitions>
                                            <BrushTransition Property="Foreground"
                                                             Duration="{DynamicResource BrushTransitionDuration}"/>
                                        </Transitions>
                                    </ContentPresenter.Transitions>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Border>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <Style Selector="^ /template/ Border#Outer">
            <Setter Property="BorderThickness" Value="4"/>

            <!--Compensate border thickness so the border is fully outside-->
            <Setter Property="Margin" Value="-4"/>

            <!--Assume inner border corner radius is 16 and outer border thickness is 4, so I believe math is 16 - (4 / 2) = 14-->
            <Setter Property="CornerRadius" Value="14"/>

            <Setter Property="BorderBrush">
                <SolidColorBrush Color="{DynamicResource Accent}" Opacity="0"/>
            </Setter>
        </Style>

        <Style Selector="^ /template/ Border#Inner">
            <Setter Property="BoxShadow" Value="{DynamicResource BoxShadow}"/>
        </Style>

        <Style Selector="^ /template/ TextBlock#Watermark">
            <Setter Property="Foreground" Value="{DynamicResource WatermarkSecondary}"/>
        </Style>

        <Style Selector="^ /template/ ContentPresenter#LeftContentPresenter">
            <Setter Property="Margin" Value="0 0 4 0"/>
        </Style>

        <Style Selector="^ /template/ ContentPresenter#RightContentPresenter">
            <Setter Property="Margin" Value="4 0 0 0"/>
        </Style>

        <Style Selector="^:focus">
            <Setter Property="Foreground" Value="{DynamicResource PrimaryForeground}"/>

            <Style Selector="^ /template/ Border#Outer">
                <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
            </Style>

            <Style Selector="^ /template/ TextBlock#Watermark">
                <Setter Property="Foreground" Value="{DynamicResource WatermarkPrimary}"/>
            </Style>
        </Style>

        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource DisabledTextBoxBackground}"/>
        </Style>

        <Style Selector="^.compact">
            <Setter Property="Padding" Value="6"/>
        </Style>

        <Style Selector="^.clear-button">
            <Setter Property="InnerRightContent">
                <Template>
                    <Button Theme="{DynamicResource EmbeddedButtonTheme}"
                            Content="{icons:MaterialIconExt Close}"
                            Padding="6">
                        <Button.Command>
                            <commands:ClearTextCommand
                                CanExecute="{Binding $parent[TextBox].Text, Converter={x:Static StringConverters.IsNotNullOrEmpty}}"
                                TextBox="{Binding $parent[TextBox]}"/>
                        </Button.Command>
                    </Button>
                </Template>
            </Setter>
        </Style>

        <Style Selector="^.reveal-password-button">
            <Setter Property="InnerRightContent">
                <Template>
                    <ToggleButton Theme="{DynamicResource EmbeddedButtonTheme}"
                                  Content="{icons:MaterialIconExt EyeOff}"
                                  IsChecked="{Binding $parent[TextBox].RevealPassword, Mode=OneWayToSource}"
                                  ToolTip.Tip="Reveal password">
                        <ToggleButton.Styles>
                            <Style Selector="ToggleButton:checked">
                                <Setter Property="ToolTip.Tip" Value="Hide password"/>
                                <Setter Property="Content">
                                    <Template>
                                        <icons:MaterialIcon Kind="Eye"/>
                                    </Template>
                                </Setter>
                            </Style>
                        </ToggleButton.Styles>
                    </ToggleButton>
                </Template>
            </Setter>
        </Style>

        <Style Selector="^.compact">
            <Setter Property="Padding" Value="8 4"/>
        </Style>

    </ControlTheme>
</ResourceDictionary>